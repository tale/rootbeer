# Scans through all the CLI commands and generates an array of them
# This array is defined in cli_module.h and used throughout for all operations

file(GLOB CMD_SOURCES "${CMAKE_SOURCE_DIR}/src/cli/commands/*.c")
set(FILE "${CMAKE_BINARY_DIR}/cmd_array.c")

add_custom_command(
	OUTPUT ${FILE}
	COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}"
	COMMAND ${CMAKE_COMMAND} -E remove -f ${FILE}
	COMMAND ${CMAKE_COMMAND} -E touch ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "// Auto-generated by CMake" > ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo_append "\\\#include " >> ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "\\\"cli_module.h\\\"" >> ${FILE}
	DEPENDS ${CMD_SOURCES}
	CODEGEN
)

foreach(CMD_SOURCE ${CMD_SOURCES})
	get_filename_component(CMD_NAME ${CMD_SOURCE} NAME_WE)
	add_custom_command(
		OUTPUT ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo_append "extern rb_cli_cmd " >> ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo_append "${CMD_NAME}" >> ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo "'$<SEMICOLON>'" >> ${FILE}
		DEPENDS ${CMD_SOURCE}
		APPEND
	)
endforeach()

string(REPLACE ";" " " CMD_HEADER_FILE "${CMD_HEADER_FILE}")
add_custom_command(
	OUTPUT ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "" >> ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "rb_cli_cmd *rb_cli_cmds[] = {" >> ${FILE}
	DEPENDS ${CMD_SOURCES}
	APPEND
)

foreach(CMD_SOURCE ${CMD_SOURCES})
	get_filename_component(CMD_NAME ${CMD_SOURCE} NAME_WE)
	add_custom_command(
		OUTPUT ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo_append "    " >> ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo_append "\\&${CMD_NAME}" >> ${FILE}
		COMMAND ${CMAKE_COMMAND} -E echo "'$<COMMA>'" >> ${FILE}
		DEPENDS ${CMD_SOURCE}
		APPEND
	)
endforeach()

add_custom_command(
	OUTPUT ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "    NULL" >> ${FILE}
	COMMAND ${CMAKE_COMMAND} -E echo "'}$<SEMICOLON>'" >> ${FILE}
	DEPENDS ${CMD_SOURCES}
	APPEND
)

add_custom_target(generate_commands DEPENDS ${FILE})
add_library(${PROJECT}_cli ${FILE})

target_include_directories(${PROJECT}_cli PRIVATE ${CMAKE_SOURCE_DIR}/include)
add_dependencies(${PROJECT}_cli generate_commands)
